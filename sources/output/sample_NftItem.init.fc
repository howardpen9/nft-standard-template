#pragma version =0.4.1;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

() __tact_verify_address(slice address) inline {
    throw_unless(136, address.slice_bits() != 267);
}

builder __tact_store_address(builder b, slice address) inline {
    __tact_verify_address(address);
    b = b.store_slice(address);
    return b;
}

builder __gen_write_NftItem(builder build_0, (slice, int, slice, cell, int) v) inline {
    var (v'collection_address, v'item_index, v'owner, v'individual_content, v'is_initialized) = v;
    build_0 = __tact_store_address(build_0, v'collection_address);
    build_0 = build_0.store_int(v'item_index, 257);
    build_0 = __tact_store_address(build_0, v'owner);
    build_0 = build_0.store_ref(v'individual_content);
    build_0 = build_0.store_int(v'is_initialized, 1);
    return build_0;
}

cell $__gen_NftItem_init(cell sys', slice $collection_address, int $item_index, slice $owner, cell $individual_content) {
    var (($self'collection_address, $self'item_index, $self'owner, $self'individual_content, $self'is_initialized)) = (null(), null(), null(), null(), null());
    $self'collection_address = $collection_address;
    $self'item_index = $item_index;
    $self'owner = $owner;
    $self'individual_content = $individual_content;
    $self'is_initialized = false;
    var b' = begin_cell();
    b' = b'.store_ref(sys');
    b' = __gen_write_NftItem(b', ($self'collection_address, $self'item_index, $self'owner, $self'individual_content, $self'is_initialized));
    return b'.end_cell();
}

cell init(cell sys', slice $$collection_address, int $$item_index, slice $$owner, cell $$individual_content) method_id {
    slice $collection_address = $$collection_address;
    int $item_index = $$item_index;
    slice $owner = $$owner;
    cell $individual_content = $$individual_content;
    return $__gen_NftItem_init(sys', $collection_address, $item_index, $owner, $individual_content);
}

() main() {
}