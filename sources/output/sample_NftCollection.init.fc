#pragma version =0.4.1;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

() __tact_verify_address(slice address) inline {
    throw_unless(136, address.slice_bits() != 267);
}

builder __tact_store_address(builder b, slice address) inline {
    __tact_verify_address(address);
    b = b.store_slice(address);
    return b;
}

forall X0, X1, X2 -> (X0, X1, X2) __tact_tuple_destroy_3(tuple v) asm "3 UNTUPLE";

builder __gen_write_RoyaltyParams(builder build_0, (int, int, slice) v) inline {
    var (v'numerator, v'denominator, v'destination) = v;
    build_0 = build_0.store_int(v'numerator, 257);
    build_0 = build_0.store_int(v'denominator, 257);
    build_0 = __tact_store_address(build_0, v'destination);
    return build_0;
}

builder __gen_write_NftCollection(builder build_0, (int, slice, (int, int, slice), cell) v) inline {
    var (v'next_item_index, v'owner_address, (v'royalty_params'numerator, v'royalty_params'denominator, v'royalty_params'destination), v'collection_content) = v;
    build_0 = build_0.store_uint(v'next_item_index, 32);
    build_0 = __tact_store_address(build_0, v'owner_address);
    var build_1 = begin_cell();
    build_1 = __gen_write_RoyaltyParams(build_1, (v'royalty_params'numerator, v'royalty_params'denominator, v'royalty_params'destination));
    build_1 = build_1.store_ref(v'collection_content);
    build_0 = store_ref(build_0, build_1.end_cell());
    return build_0;
}

(int, int, slice) __gen_RoyaltyParams_from_tuple(tuple v) inline {
    var (int v'numerator, int v'denominator, slice v'destination) = __tact_tuple_destroy_3(v);
    return (v'numerator, v'denominator, v'destination);
}

cell $__gen_NftCollection_init(cell sys', slice $owner_address, cell $collection_content, (int, int, slice) $royalty_params) {
    var (($royalty_params'numerator, $royalty_params'denominator, $royalty_params'destination)) = $royalty_params;
    var (($self'next_item_index, $self'owner_address, ($self'royalty_params'numerator, $self'royalty_params'denominator, $self'royalty_params'destination), $self'collection_content)) = (0, null(), null(), null());
    $self'owner_address = $owner_address;
    $self'collection_content = $collection_content;
    ($self'royalty_params'numerator, $self'royalty_params'denominator, $self'royalty_params'destination) = ($royalty_params'numerator, $royalty_params'denominator, $royalty_params'destination);
    var b' = begin_cell();
    b' = b'.store_ref(sys');
    b' = __gen_write_NftCollection(b', ($self'next_item_index, $self'owner_address, ($self'royalty_params'numerator, $self'royalty_params'denominator, $self'royalty_params'destination), $self'collection_content));
    return b'.end_cell();
}

cell init(cell sys', slice $$owner_address, cell $$collection_content, tuple $$royalty_params) method_id {
    slice $owner_address = $$owner_address;
    cell $collection_content = $$collection_content;
    (int, int, slice) $royalty_params = __gen_RoyaltyParams_from_tuple($$royalty_params);
    return $__gen_NftCollection_init(sys', $owner_address, $collection_content, $royalty_params);
}

() main() {
}